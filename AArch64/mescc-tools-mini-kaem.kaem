#!/usr/bin/env bash
# Copyright © 2017 Jan Nieuwenhuizen <janneke@gnu.org>
# Copyright © 2017 Jeremiah Orians
# Copyright © 2020 Sanne Wouda
#
# This file is part of stage0.
#
# stage0 is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or (at
# your option) any later version.
#
# stage0 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with stage0.  If not, see <http://www.gnu.org/licenses/>.


# Can also be run by kaem or any other shell of your personal choice
# To run in kaem simply: kaem --verbose --strict
# Warning all binaries prior to the use of blood-elf will not be readable by
# Objdump, you may need to use ndism or gdb to view the assembly in the binary.


#################################
# Phase-1 Build hex1 from hex0  #
#################################
./hex0 hex1_AArch64.hex0 hex1
# hex1 adds support for single character labels and is available in various froms
# in mescc-tools-seed/AArch64 to allow you various ways to verify correctness

#################################
# Phase-2 Build hex2 from hex1  #
#################################
./hex1 hex2_AArch64.hex1 hex2-0
# hex2 adds support for long labels and absolute addresses thus allowing it
# to function as an effective linker for later stages of the bootstrap
# This is a minimal version which will be used to bootstrap a much more advanced
# version in a later stage.

#################################
# Phase-2b Build catm from hex1 #
#################################
./hex1 catm_AArch64.hex1 catm
# catm removes the need for cat or shell support for redirection by providing
# equivalent functionality via catm output_file input1 input2 ... inputN

###############################
# Phase-3 Build M0 from hex2  #
###############################
./catm hold ELF-aarch64.hex2 M0_AArch64.hex2
./hex2-0 hold M0
# M0 is the architecture specific version of M1 and is by design single
# architecture only and will be replaced by the C code version of M1

#####################################
# Phase-4 Build cc_aarch64 from M0  #
#####################################
./M0 cc_aarch64.M1 temp1
./catm hold ELF-aarch64.hex2 temp1
./hex2-0 hold cc_aarch64

###########################################
# Phase-5 Build M2-Planet from cc_aarch64 #
###########################################
./catm hold ../M2-Planet/test/common_aarch64/functions/file.c \
	../M2-Planet/test/common_aarch64/functions/malloc.c \
	../M2-Planet/test/common_aarch64/functions/fixup.c \
	../M2-Planet/functions/calloc.c \
	../M2-Planet/test/common_aarch64/functions/exit.c \
	../M2-Planet/functions/match.c \
	../M2-Planet/functions/in_set.c \
	../M2-Planet/functions/numerate_number.c \
	../M2-Planet/functions/file_print.c \
	../M2-Planet/functions/number_pack.c \
	../M2-Planet/functions/string.c \
	../M2-Planet/functions/require.c \
	../M2-Planet/cc.h \
	../M2-Planet/cc_globals.c \
	../M2-Planet/cc_reader.c \
	../M2-Planet/cc_strings.c \
	../M2-Planet/cc_types.c \
	../M2-Planet/cc_core.c \
	../M2-Planet/cc_macro.c \
	../M2-Planet/cc.c
./cc_aarch64 hold M2.M1
./catm hold aarch64_defs.M1 libc-core.M1 M2.M1
./M0 hold temp1
./catm hold ELF-aarch64.hex2 temp1
./hex2-0 hold M2

#############################################
# Phase-6 Build blood-elf-0 from C sources  #
#############################################
./M2 --architecture aarch64 \
	-f ../M2-Planet/test/common_aarch64/functions/exit.c \
	-f ../M2-Planet/test/common_aarch64/functions/file.c \
	-f ../M2-Planet/functions/file_print.c \
	-f ../mescc-tools/functions/numerate_number.c \
	-f ../M2-Planet/test/common_aarch64/functions/malloc.c \
	-f ../M2-Planet/functions/calloc.c \
	-f ../M2-Planet/functions/match.c \
	-f ../mescc-tools/blood-elf.c \
	-f ../M2-Planet/functions/require.c \
	-f ../M2-Planet/functions/in_set.c \
	--bootstrap-mode \
	-o blood-elf.M1

./catm hold aarch64_defs.M1 libc-core.M1 blood-elf.M1
./M0 hold temp1
./catm hold ELF-aarch64.hex2 temp1
./hex2-0 hold blood-elf-0
# This is the last stage where the binaries will not have debug info
# and the last piece built that isn't part of the output binaries

###################################
# Phase-7 Build M1 from C sources #
###################################
./M2 --architecture aarch64 \
	-f ../M2-Planet/test/common_aarch64/functions/exit.c \
	-f ../M2-Planet/test/common_aarch64/functions/file.c \
	-f ../M2-Planet/functions/file_print.c \
	-f ../M2-Planet/test/common_aarch64/functions/malloc.c \
	-f ../M2-Planet/functions/calloc.c \
	-f ../M2-Planet/functions/match.c \
	-f ../M2-Planet/functions/in_set.c \
	-f ../M2-Planet/functions/numerate_number.c \
	-f ../M2-Planet/functions/string.c \
	-f ../M2-Planet/functions/require.c \
	-f ../mescc-tools/M1-macro.c \
	--bootstrap-mode \
	--debug \
	-o M1-macro.M1

./blood-elf-0 --64 -f M1-macro.M1 -o M1-macro-footer.M1
./catm hold aarch64_defs.M1 libc-core.M1 M1-macro.M1 M1-macro-footer.M1
./M0 hold temp1
./catm hold ELF-aarch64-debug.hex2 temp1
./hex2-0 hold ../bin/M1

# This is the last stage where M0 is used, as we will being using its much more
# powerful and cross-platform version with a bunch of extra goodies.

#####################################
# Phase-8 Build hex2 from C sources #
#####################################
./M2 --architecture aarch64 \
	-f ../M2-Planet/test/common_aarch64/functions/exit.c \
	-f ../M2-Planet/test/common_aarch64/functions/file.c \
	-f ../M2-Planet/functions/file_print.c \
	-f ../M2-Planet/test/common_aarch64/functions/malloc.c \
	-f ../M2-Planet/functions/calloc.c \
	-f ../M2-Planet/functions/match.c \
	-f ../M2-Planet/functions/require.c \
	-f ../M2-Planet/functions/in_set.c \
	-f ../M2-Planet/functions/numerate_number.c \
	-f ../M2-Planet/test/common_aarch64/functions/stat.c \
	-f ../mescc-tools/hex2_linker.c \
	--bootstrap-mode \
	--debug \
	-o hex2_linker.M1

./blood-elf-0 --64 -f hex2_linker.M1 -o hex2_linker-footer.M1
../bin/M1 -f aarch64_defs.M1 \
	-f libc-core.M1 \
	-f hex2_linker.M1 \
	-f hex2_linker-footer.M1 \
	--LittleEndian \
	--architecture aarch64 \
	-o temp1

./catm hold ELF-aarch64-debug.hex2 temp1
./hex2-0 hold ../bin/hex2
# This is the last stage where catm will need to be used and the last stage
# where the handwritten hex2 is used, as we will be using it's mmuch more
# powerful and cross-platform version with a bunch of extra goodies.

#####################################
# Phase-9 Build kaem from C sources#
#####################################
./M2 --architecture aarch64 \
	-f ../M2-Planet/test/common_aarch64/functions/exit.c \
	-f ../M2-Planet/test/common_aarch64/functions/file.c \
	-f ../M2-Planet/functions/file_print.c \
	-f ../M2-Planet/test/common_aarch64/functions/malloc.c \
	-f ../M2-Planet/functions/calloc.c \
	-f ../M2-Planet/functions/match.c \
	-f ../M2-Planet/functions/in_set.c \
	-f ../M2-Planet/functions/require.c \
	-f ../mescc-tools/functions/string.c \
	-f ../M2-Planet/functions/numerate_number.c \
	-f ../M2-Planet/test/common_aarch64/functions/fork.c \
	-f ../M2-Planet/test/common_aarch64/functions/execve.c \
	-f ../M2-Planet/test/common_aarch64/functions/chdir.c \
	-f ../M2-Planet/test/common_aarch64/functions/getcwd.c \
	-f ../mescc-tools/Kaem/kaem.h \
	-f ../mescc-tools/Kaem/variable.c \
	-f ../mescc-tools/Kaem/kaem_globals.c \
	-f ../mescc-tools/Kaem/kaem.c \
	--bootstrap-mode \
	--debug \
	-o kaem.M1

./blood-elf-0 --64 -f kaem.M1 -o kaem-footer.M1

../bin/M1 -f aarch64_defs.M1 \
	-f libc-core.M1 \
	-f kaem.M1 \
	-f kaem-footer.M1 \
	--LittleEndian \
	--architecture aarch64 \
	-o hold

../bin/hex2 -f ELF-aarch64-debug.hex2 \
	-f hold \
	--LittleEndian \
	--architecture aarch64 \
	--BaseAddress 0x00600000 \
	-o ../bin/kaem \
	--exec_enable
